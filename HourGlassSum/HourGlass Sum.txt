#include<iostream>
using namespace std;


int findHourGlassSum(int arr[7][7], int r, int c)
{
           int sum=0, i;
           for (i = c ; i < (c+3) ; i++)
           {  sum = sum + arr[r][i];
           }
            r++;
            c++;
           sum = sum + arr[r][c];
           r++;
           c--;
           for (i = c ; i < (c+3) ; i++)
           {  sum = sum + arr[r][i];
           }
           return sum; 
}
int main()
{

 int arr[7][7], r, c, sum[16], i,z=0;
   for (r =1 ; r<7 ; r++)
   {      for(c=1 ; c<7 ; c++)
         {  cin >> arr[r][c];
         }
   }
 
   
 /*  for (r =1 ; r<7 ; r++)
   {      for(c=1 ; c<7 ; c++)
         {  cout << arr[r][c];
            cout << " ";
         }
         cout <<"\n";
         
   }
   */
for (r=1 ; r <=4 ; r++)
{   for (c=1 ; c<=4 ; c++)
    {

           sum[z] = findHourGlassSum(arr, r, c)   ;   
           z++;
           
   }
}
    
   /* for(i=0 ; i<16 ; i++)
    {  cout << sum[i];
       cout << " ";
    }
*/
    int max;
    max = sum[0];
    for (i=1 ; i<16 ; i++)
    {    if (sum[i]> max)
         max = sum[i]; 
    }
    cout<<max;
   
}


/*  to find the sums of hourglass of a 6x6 matrix and determining the maximum sum 

1 1 1 0 0 0
0 1 0 0 0 0
1 1 1 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
We define an hourglass in  to be a subset of values with indices falling in this pattern in 's graphical representation:

a b c
  d
e f g
There are  hourglasses in , and an hourglass sum is the sum of an hourglass' values. Calculate the hourglass sum for every hourglass in , then print the maximum hourglass sum.

For example, given the 2D array:

-9 -9 -9  1 1 1 
 0 -9  0  4 3 2
-9 -9 -9  1 2 3
 0  0  8  6 6 0
 0  0  0 -2 0 0
 0  0  1  2 4 0
We calculate the following  hourglass values:

-63, -34, -9, 12, 
-10, 0, 28, 23, 
-27, -11, -2, 10, 
9, 17, 25, 18
Our highest hourglass value is  from the hourglass:28

*/